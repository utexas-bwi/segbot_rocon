#! /usr/bin/env python

import actionlib
import math
import rospy
import tf

from geometry_msgs.msg import Quaternion
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

def resolve_frame(frame):
    tf_prefix_param_name = rospy.search_param('tf_prefix')
    if tf_prefix_param_name is None:
        return frame
    tf_prefix = rospy.get_param(tf_prefix_param_name)
    return tf_prefix + '/' + frame

def segbot_stroll():
    # Creates the SimpleActionClient, passing the type of the action
    # (FibonacciAction) to the constructor.
    client = actionlib.SimpleActionClient('move_base', MoveBaseAction)

    robot_base_frame = rospy.get_param('~robot_base_frame', 'base_footprint')
    resolved_frame = resolve_frame(robot_base_frame)
    rospy.loginfo("SegbotStroll: Resolved robot frame: " + resolved_frame)

    # Waits until the action server has started up and started
    # listening for goals.
    while not rospy.is_shutdown():
        if client.wait_for_server(rospy.Duration(1)):
            break

    while not rospy.is_shutdown():
        # Creates a goal to send to the action server.
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = resolved_frame
        goal.target_pose.header.stamp = rospy.get_rostime()
        goal.target_pose.pose.position.x = 5.0
        goal.target_pose.pose.position.y = 0.0
        goal.target_pose.pose.position.z = 0.0
        q = tf.transformations.quaternion_from_euler(0,0,math.pi/2)
        goal.target_pose.pose.orientation = Quaternion(*q)

        # Sends the goal to the action server.
        client.send_goal(goal)

        # Waits for the server to finish performing the action.
        while not rospy.is_shutdown():
            if client.wait_for_result(rospy.Duration(1)):
                break

if __name__ == '__main__':
    try:
        rospy.init_node('segbot_stroll')
        segbot_stroll()
    except rospy.ROSInterruptException:
        pass
